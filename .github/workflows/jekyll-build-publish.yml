name: jekyll-build-publish

# see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-including-and-excluding-branches
on:
  pull_request:
    branches: [ main, dev , docs ]
  push:
    branches: [ main, dev , docs ]
    paths-ignore: 
      - '!README.md'
  workflow_dispatch:

# see https://docs.github.com/en/actions/learn-github-actions/environment-variables
env: 
  IS_DEV: ${{ github.ref != 'refs/heads/main' }}
  ARTIFACT_DOCS_NAME: docs
  DEV_DEPLOY_PREFIX: demo

jobs:

  docs_update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è # publish to dev
        uses: actions/checkout@v3
        with:
          ref: docs
      - name: Archive production artifacts üî∫  # see https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts#passing-data-between-jobs-in-a-workflow
        uses: actions/upload-artifact@v3 
        with:
          name: ${{ env.ARTIFACT_DOCS_NAME }}
          path: docs

  build_deploy:
    runs-on: ubuntu-latest
    needs: [ docs_update ]
    steps:
      - name: Checkout dev üõéÔ∏è # publish to dev
        if: ${{ env.IS_DEV == 'true' }}
        uses: actions/checkout@v3
        with:
          ref: dev
      - name: Checkout pro üõéÔ∏è # publish to pro
        if: ${{ env.IS_DEV == 'false' }}
        uses: actions/checkout@v3
        with:
          ref: main
      # - name: Cache bundle install # cache. see https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
      - name: Cache Ruby - Bundler # see https://github.com/actions/cache/blob/master/examples.md#ruby---bundler
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Download production artifact üîª
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_DOCS_NAME }}
          path: docs
      # uses: ruby/setup-ruby@v1 # see https://github.com/ruby/setup-ruby#caching-bundle-install-automatically
      # - name: Set up Ruby üìÅ
      #   # uses: ruby/setup-ruby@473e4d8fe5dd94ee328fdfca9f8c9c7afc9dae5e
      #   uses: ruby/setup-ruby@v1
      #   with:
      #     ruby-version: '3.0'
      #     # see https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-ruby#caching-dependencies
      #     bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Set up Ruby üìÅ
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7
      - name: Install dependencies üîß
        run: |
          gem environment
          gem list 
          bundle list
          gem install bundler
          # bundle install
          # see https://github.com/actions/cache/blob/master/examples.md#ruby---bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Build dev üì¶
        if: ${{ env.IS_DEV == 'true' }}
        run: bundle exec jekyll build -d _site/
      - name: Build pro üì¶
        if: ${{ env.IS_DEV == 'false' }}
        run: |
          sed -i "s/^baseurl:.*${{ env.DEV_DEPLOY_PREFIX }}.*/baseurl: /g" _config.yml
          bundle exec jekyll build -d _site/
      - name: Deploy dev üöÄ # see https://github.com/LawssssCat/github-pages-deploy-action
        if: ${{ env.IS_DEV == 'true'}}
        uses: LawssssCat/github-pages-deploy-action@v4.3.3
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BRANCH: gh-pages
          FOLDER: _site
          # clean: true
          target-folder: ${{ env.DEV_DEPLOY_PREFIX }}
      - name: Deploy pro üöÄ # see https://github.com/LawssssCat/github-pages-deploy-action
        if: ${{ env.IS_DEV == 'false'}}
        uses: LawssssCat/github-pages-deploy-action@v4.3.3
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BRANCH: gh-pages
          FOLDER: _site
          # clean: true
          clean-exclude: ${{ env.DEV_DEPLOY_PREFIX }}

  # see https://docs.github.com/en/actions/learn-github-actions/contexts#example-printing-context-information-to-the-log
  dump_contexts_to_log:
      runs-on: ubuntu-latest
      steps:
        - name: Dump GitHub context üõéÔ∏è
          id: github_context_step
          run: echo '${{ toJSON(github) }}'
        - name: Dump env context
          run: echo '${{ toJSON(env) }}'
        - name: Dump job context
          run: echo '${{ toJSON(job) }}'
        - name: Dump steps context
          run: echo '${{ toJSON(steps) }}'
        - name: Dump runner context
          run: echo '${{ toJSON(runner) }}'
        - name: Dump strategy context
          run: echo '${{ toJSON(strategy) }}'
        - name: Dump matrix context
          run: echo '${{ toJSON(matrix) }}'
        - name: Dump secrets context
          run: echo '${{ toJSON(secrets) }}'
        - name: Dump needs context
          run: echo '${{ toJSON(needs) }}'
        - name: Dump inputs context
          run: echo '${{ toJSON(inputs) }}'  
