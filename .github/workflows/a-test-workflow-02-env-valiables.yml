# https://docs.github.com/en/actions/learn-github-actions/environment-variables
name: Greeting on variable day

on:
  push:
    branches: [ docs ]
  workflow_dispatch:

env:
  DAY_OF_WEEK: Monday

jobs:
  greeting_job:
    runs-on: ubuntu-latest
    env:
      Greeting: Hello
    steps:
      # Environment variables. see https://docs.github.com/en/actions/learn-github-actions/environment-variables
      - name: "Say Hello Mona it's Monday"
        run: |
          echo "$Greeting $First_Name. Today is $DAY_OF_WEEK!"
          env
        env:
          First_Name: Mona
      # install repo
      - name: checkout
        uses: actions/checkout@v3
      - run: npm install -g bats
      - name: Run build script
        run: |
          chmod +x ./.github/scripts/build.sh
          ./.github/scripts/build.sh
        shell: bash
      # Sharing data between jobs. see https://docs.github.com/en/actions/learn-github-actions/essential-features-of-github-actions#sharing-data-between-jobs
      - name: Sharing data between jobs
        shell: bash
        run: |
          expr 1 + 1 > output.log
          ls -l 
          cat output.log
          echo ${{ hashFiles('output.log') }}
      - name: Upload output file
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: output-log-file
          path: output.log
      - name: delete data between jobs
        if: ${{ always() }}
        run: |
          ls -l 
          cat output.log
          echo ${{ hashFiles('output.log') }}
          rm output.log
          ls -l 
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        if: ${{ always() }}
        with:
          name: output-log-file
      - name: check data between jobs
        if: ${{ always() }}
        run: |
          ls -l 
          cat output.log
          echo ${{ hashFiles('output.log') }}
      - name: a
        run: |
          echo ${{ github.action_status }} # github.action_status
          xxxxxxxxxxxxxxxx error
      - name: b
        if: ${{ always() }}
        run: |
          echo haha
          echo ${{job.a.status}}
      - name: c
        run: echo bb
      - name: job status check
        if: ${{ job.a.status == 'failure' }}
        run: echo qq

  # expression function json. see https://docs.github.com/en/actions/learn-github-actions/expressions#fromjson
  job1:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: echo "::set-output name=matrix::{\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}"
  job2:
    needs: job1
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.job1.outputs.matrix)}}
    steps:
      - run: |
          env
          echo ${{needs.job1.outputs.matrix}}
  # context. see https://docs.github.com/en/actions/learn-github-actions/contexts#about-contexts
  prod-check:
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{github.ref}}
      - run: echo "Deploying to production server on branch $GITHUB_REF"
        if: ${{ github.ref == 'refs/heads/main' }}
  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump env context
        run: echo '${{ toJSON(env) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'
      - name: Dump secrets context
        run: echo '${{ toJSON(secrets) }}'
      - name: Dump needs context
        run: echo '${{ toJSON(needs) }}'
      - name: Dump inputs context
        run: echo '${{ toJSON(inputs) }}'  